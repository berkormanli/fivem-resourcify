#! /usr/bin/env node
import e from"chalk";import t from"inquirer";import a from"fs";import{createSpinner as s}from"nanospinner";import r from"boxen";const o=(t=2e3)=>new Promise(e=>setTimeout(e,t)),i=["⠁","⠉","⠙","⠚","⠒","⠂","⠂","⠒","⠲","⠴","⠤","⠄","⠄","⠤","⠴","⠲","⠒","⠂","⠂","⠒","⠚","⠙","⠉","⠁"],n=e=>{a.mkdirSync(process.cwd()+e,{recursive:!0},e=>!e)};async function c(e,s){return new Promise((t,r)=>{a.writeFile(process.cwd()+e,s,e=>{e?r(e):t()})})}let u={};async function m(){return async function(e){var t=s("").update({text:"Setting resource UI",color:"green",stream:process.stdout,frames:i,interval:80}).start();await o(200),u.ui=e,t.success({text:"UI set!"})}("Yes"===(await t.prompt({name:"resource_ui",type:"list",message:"Will you add an UI to your resource?\n",choices:["Yes","No"]})).resource_ui)}console.clear();var p=(await t.prompt({name:"resource_name",type:"input",message:"What is your resource name?\n",default(){return"cli-resource"}})).resource_name,l=s("").update({text:"Setting resource name",color:"green",stream:process.stdout,frames:i,interval:80}).start(),p=(await o(20),u.name=p,l.success({text:"Name set!"}),await 0,(await t.prompt({name:"resource_author",type:"input",message:"What is the author's name?\n"})).resource_author),l=s("").update({text:"Setting resource author",color:"green",stream:process.stdout,frames:i,interval:80}).start(),p=(await o(20),u.author=p,l.success({text:"Author set!"}),await 0,(await t.prompt({name:"resource_description",type:"input",message:"What is the description?\n"})).resource_description),l=s("").update({text:"Setting resource description",color:"green",stream:process.stdout,frames:i,interval:80}).start(),p=(await o(20),u.description=p,l.success({text:"Description set!"}),await 0,(await t.prompt({name:"resource_version",type:"input",message:"What is the resource version?\n",default(){return"1.0.0"}})).resource_version),l=s("").update({text:"Setting resource version",color:"green",stream:process.stdout,frames:i,interval:80}).start(),p=(await o(20),u.version=p,l.success({text:"Version set!"}),await 0,(await t.prompt({name:"resource_games",type:"checkbox",message:"Which games are supported?\n",choices:[{name:"GTA5",value:"gta5"},{name:"RDR2",value:"rdr3"}]})).resource_games),l=s("").update({text:"Setting supported games",color:"green",stream:process.stdout,frames:i,interval:80}).start(),p=(await o(20),u.games=p,l.success({text:"Games set!"}),await 0,(await t.prompt({name:"resource_language",type:"list",message:"Which language you want to create your resource in?\n",choices:[{name:"Lua",value:"lua"},{name:"Javascript",value:"js"}]})).resource_language),l=s("").update({text:"Setting resource language",color:"green",stream:process.stdout,frames:i,interval:80}).start(),p=(await o(200),u.language=p,l.success({text:"Language set!"}),await 0,(await t.prompt({name:"resource_type",type:"list",message:"Which language you want to create your resource in?\n",choices:["Client",{name:"Server",short:"The resource will be set to server-only. Please refer to: https://docs.fivem.net/docs/scripting-reference/resource-manifest/resource-manifest/#server_only"},"Client+Server"]})).resource_type),l=s("").update({text:"Setting resource type",color:"green",stream:process.stdout,frames:i,interval:80}).start(),p=(await o(200),u.type="Client+Server"===p?{client:!0,server:!0}:"Client"===p?{client:!0,server:!1}:{client:!1,server:!0},l.success({text:"Type set!"}),await 0,u.type.client&&await m(),"Yes"===(await t.prompt({name:"resource_escrow",type:"list",message:"Will you protect your resource with escrow?\n",choices:["Yes","No"]})).resource_escrow),l=s("").update({text:"Setting escrow settings",color:"green",stream:process.stdout,frames:i,interval:80}).start();await o(200),u.escrow=p,l.success({text:"Escrow set!"}),await 0,console.log(r(e.green(`Resource name: ${u.name}
Resource author: ${u.author}
Resource description: ${u.description}
Resource version: ${u.version}
Supported games: ${u.games.map(e=>"gta5"===e?"FiveM":"rdr3"===e?"RedM":void 0).join(", ")}
Resource language: ${"lua"===u.language?"Lua":"JavaScript"}
Resource type: ${!0===u.type.client&&!0===u.type.server?"Client + Server":!0===u.type.client&&!1===u.type.server?"Client Only":"Server Only"}
${!0===u.type.client?"Has UI: "+(u.ui?"Yes":"No"):""}
Lua 5.4 & Escrow: `+(u.escrow?"Yes":"No")),{title:"Resource created!",padding:1,borderStyle:"round",borderColor:"green",dimBorder:!0})),async function(t){const r=s("").update({text:"Creating resource directory according to your configuration.",color:"green",stream:process.stdout,frames:i,interval:80}).start();a.promises.access(process.cwd()+"/test-resource").then(()=>r.error({text:"There is already a folder with the same name"})).catch(()=>{var e;a.existsSync(process.cwd()+t.name)||(n("/"+t.name),c(`/${t.name}/fxmanifest.lua`,`fx_version 'cerulean'
games { ${(e=t).games.map(e=>`'${e}'`).join(", ")} }

author '${e.author}'
description '${e.description}'
version '${e.version}'

`+(!1===e.type.client&&!0===e.type.server?"server_only 'yes'":"")+(e.type.client?`client_scripts {
    'client/*.${e.language}'
}

`:"")+(e.type.server?`server_scripts {
    'server/*.${e.language}'
}

`:"")+(e.ui?"ui_page 'ui/index.html'\n\n":"")+(e.ui?`files {
    'ui/index.html',
    'ui/images/*.jpg',
    'ui/images/*.jpeg',
    'ui/images/*.png',
    'ui/images/*.svg',
    'ui/js/*.js',
    'ui/css/*.css',
}

`:"")+(e.escrow?`lua54 'yes'

`:"")).then().catch(),t.type.client&&(n(`/${t.name}/client`),c(`/${t.name}/client/main.`+t.language,"").then().catch()),t.type.server&&(n(`/${t.name}/server`),c(`/${t.name}/server/main.`+t.language,"").then().catch()),t.ui&&(n(`/${t.name}/ui/images`),n(`/${t.name}/ui/js`),c(`/${t.name}/ui/js/script.js`,"").then().catch(),n(`/${t.name}/ui/css`),c(`/${t.name}/ui/css/style.css`,`* {
    margin: 0;
    padding: 0;
 }`).then().catch(),c(`/${t.name}/ui/index.html`,`<html>

<head>
	<title>${t.name}</title>
	<meta name="author" content="${t.author}">
	<link rel="stylesheet" href="css/style.css" type="text/css" charset="utf-8" />
</head>

<body>
	<div class="container">

	</div>

	<script type="text/javascript" src="js/script.js"></script>
</body>
</html>`).then().catch())),r.success({text:"Done!"})})}(u);